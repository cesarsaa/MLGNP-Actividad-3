mdl_formula <- as.formula(paste("V2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
#-------------------------------
lambda <- 60
all.R <- all.R(x, lambda)
all.R
plot1 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = UBRE)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(R)(lambda)))
plot2 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = CV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(CV)(lambda)))
plot3 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = GCV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(GCV)(lambda)))
grid.arrange(plot1, plot2, plot3, ncol=2)
lambda <- 2
salida <- 2 # 1: Riesgo, 2: fitted values
fitted <- lambda.select(x, lambda, salida)
x <- bind_cols(x, fitted)
x
ggplot() + geom_point(data = x, aes(x = V1, y = V2)) +
geom_line(data = x, aes(x =V1, y = fitted))
suppressMessages(library(dplyr))
suppressMessages(library(readxl))
suppressMessages(library(tidyverse))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(foreign))
suppressMessages(library(corrplot))
suppressMessages(library(polycor))
suppressMessages(library(psych))
suppressMessages(library(gplots))
suppressMessages(library(gridExtra))
suppressMessages(library(viridis))
suppressMessages(library(lsr))
suppressMessages(library(DescTools))
suppressMessages(library(magrittr))
suppressMessages(library(nlme))
suppressMessages(library(MASS))
suppressMessages(library(multilevel))
suppressMessages(library(reshape))
suppressMessages(library(homals))
suppressMessages(library(GGally))
suppressMessages(library(CCA))
suppressMessages(library(plotly))
suppressMessages(library(broom))
suppressMessages(library(readr))
suppressMessages(library(lubridate))
suppressMessages(library(purrr))
suppressMessages(library(VGAM))
#----------------------------------------------------------------------------------------#
# Fijar directorio
setwd("/Users/cesar.saavedra/Documents/GitHub/MLGNP-Actividad-3")
setwd("C:/Users/Angie Rodríguez/Documents/GitHu/\MLGNP-Actividad-3")
#----------------------------------------------------------------------------------------#
# Cargar los datos
Datos <- read.table("Datos.txt",header=T,sep = ",")
Datos
Datos <- Datos %>% arrange(pH)
# TamaÃ±o de la muestra
n <- 60
# SelecciÃ³n de la muestra
set.seed(917)
muestra <- Datos %>% sample_n(size=n,replace=FALSE)
muestra
# Correlacion
corrplot(cor(muestra), method="square", type="upper", order="hclust", tl.col="black")
# Exploracion de datos
ggplot()+ geom_point(data = muestra, aes(y = fixed.acidity, x = pH)) +
ylab("Acidez fija") + xlab("pH")
#----------------------------------------------------------------------------------------#
library(dplyr)
x <- cbind(muestra$fixed.acidity,muestra$pH)
x <- as.data.frame(x)
x
n = nrow(x)
y  = pull(x, V2)
sigma.rice <- 1/(2*(n-1))*sum((y - lag(y, k=1))^2, na.rm = T)
sigma.rice
base_cons <- function(x,j){
sqrt(2)*cos((j-1)*pi*x)
}
#-------------------------------
lambda.select <- function(x, lambda, salida=1){
df <-   dplyr::select(x, V2)
hora_normada <- x$V1; i <- list(); y <- list()
for (i in 2:lambda) {
y[[i]] <- base_cons(hora_normada, i)
}
y <- data.frame(matrix(unlist(y), ncol = lambda-1))
df <-  bind_cols(df, y)
#-------------------------------
f.i <- df %>%
dplyr::select(contains("x")) %>%
colnames()
lambda <- lambda %>%
tibble(lambda = . )
f.i_sum <- paste(f.i, collapse = "+")
mdl_formula <- as.formula(paste("V2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
#-------------------------------
lambda <- 60
all.R <- all.R(x, lambda)
all.R
plot1 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = UBRE)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(R)(lambda)))
plot2 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = CV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(CV)(lambda)))
plot3 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = GCV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(GCV)(lambda)))
grid.arrange(plot1, plot2, plot3, ncol=2)
lambda <- 2
salida <- 2 # 1: Riesgo, 2: fitted values
fitted <- lambda.select(x, lambda, salida)
x <- bind_cols(x, fitted)
x
ggplot() + geom_point(data = x, aes(x = V1, y = V2)) +
geom_line(data = x, aes(x =V1, y = fitted))
lambda <- 60
all.R <- all.R(x, lambda)
all.R
setwd("C:/Users/Angie Rodríguez/Documents/GitHu/\MLGNP-Actividad-3")
Datos <- read.table("Datos.txt",header=T,sep = ",")
Datos
Datos <- Datos %>% arrange(pH)
# TamaÃ±o de la muestra
n <- 60
# SelecciÃ³n de la muestra
set.seed(123)
muestra <- Datos %>% sample_n(size=n,replace=FALSE)
muestra
library(dplyr)
x <- cbind(muestra$fixed.acidity,muestra$pH)
x <- as.data.frame(x)
x
n = nrow(x)
y  = pull(x, V2)
sigma.rice <- 1/(2*(n-1))*sum((y - lag(y, k=1))^2, na.rm = T)
sigma.rice
base_cons <- function(x,j){
sqrt(2)*cos((j-1)*pi*x)
}
lambda.select <- function(x, lambda, salida=1){
df <-   dplyr::select(x, V2)
hora_normada <- x$V1; i <- list(); y <- list()
for (i in 2:lambda) {
y[[i]] <- base_cons(hora_normada, i)
}
y <- data.frame(matrix(unlist(y), ncol = lambda-1))
df <-  bind_cols(df, y)
#-------------------------------
f.i <- df %>%
dplyr::select(contains("x")) %>%
colnames()
lambda <- lambda %>%
tibble(lambda = . )
f.i_sum <- paste(f.i, collapse = "+")
mdl_formula <- as.formula(paste("V2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
lambda <- 60
all.R <- all.R(x, lambda)
all.R
arrange(pH)
# TamaÃ±o de la muestra
n <- 60
Datos <- Datos %>% arrange(pH)
Datos %>% arrange(pH)
library(dplyr)
Datos <- Datos %>% arrange(pH)
Datos %>% arrange(pH)
set.seed(12345)
muestra <- Datos %>% sample_n(size=n,replace=FALSE)
muestra
x <- cbind(muestra$fixed.acidity,muestra$pH)
x <- as.data.frame(x)
x
n = nrow(x)
y  = pull(x, V2)
sigma.rice <- 1/(2*(n-1))*sum((y - lag(y, k=1))^2, na.rm = T)
sigma.rice
base_cons <- function(x,j){
sqrt(2)*cos((j-1)*pi*x)
}
#-------------------------------
lambda.select <- function(x, lambda, salida=1){
df <-   dplyr::select(x, V2)
hora_normada <- x$V1; i <- list(); y <- list()
for (i in 2:lambda) {
y[[i]] <- base_cons(hora_normada, i)
}
y <- data.frame(matrix(unlist(y), ncol = lambda-1))
df <-  bind_cols(df, y)
#-------------------------------
f.i <- df %>%
dplyr::select(contains("x")) %>%
colnames()
lambda <- lambda %>%
tibble(lambda = . )
f.i_sum <- paste(f.i, collapse = "+")
mdl_formula <- as.formula(paste("V2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
lambda <- 60
all.R <- all.R(x, lambda)
all.R
x <- cbind(muestra$fixed.acidity,muestra$pH)
muestra$pH
library(dplyr)
Datos <- Datos %>% arrange(pH)
Datos
n <- 60
# SelecciÃ³n de la muestra
set.seed(12345)
muestra <- Datos %>% sample_n(size=n,replace=FALSE)
muestra
muestra
set.seed(12345)
Datos <- Datos %>% arrange(pH)
muestra <- Datos %>% sample_n(size=n,replace=FALSE)
muestra
muestra <- sample(Datos, size= n)
muestra <-  muestra %>% arrange(pH)
muestra
library(dplyr)
x <- cbind(muestra$fixed.acidity,muestra$pH)
x <- as.data.frame(x)
x
n = nrow(x)
y  = pull(x, V2)
sigma.rice <- 1/(2*(n-1))*sum((y - lag(y, k=1))^2, na.rm = T)
sigma.rice
base_cons <- function(x,j){
sqrt(2)*cos((j-1)*pi*x)
}
#-------------------------------
lambda.select <- function(x, lambda, salida=1){
df <-   dplyr::select(x, V2)
hora_normada <- x$V1; i <- list(); y <- list()
for (i in 2:lambda) {
y[[i]] <- base_cons(hora_normada, i)
}
y <- data.frame(matrix(unlist(y), ncol = lambda-1))
df <-  bind_cols(df, y)
#-------------------------------
f.i <- df %>%
dplyr::select(contains("x")) %>%
colnames()
lambda <- lambda %>%
tibble(lambda = . )
f.i_sum <- paste(f.i, collapse = "+")
mdl_formula <- as.formula(paste("V2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
#-------------------------------
lambda <- 60
all.R <- all.R(x, lambda)
all.R
plot1 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = UBRE)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(R)(lambda)))
plot2 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = CV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(CV)(lambda)))
plot3 <- ggplot()+
geom_point(data = all.R, aes(x = LAMBDA, y = GCV)) +
theme_bw() +
labs(x =  expression(lambda), y = expression(hat(GCV)(lambda)))
grid.arrange(plot1, plot2, plot3, ncol=2)
lambda <- 60
all.R <- all.R(x, lambda)
all.R
muestra <-  muestra %>% arrange(pH)
# Correlacion
corrplot(cor(muestra), method="square", type="upper", order="hclust", tl.col="black")
# Exploracion de datos
ggplot()+ geom_point(data = muestra, aes(y = fixed.acidity, x = pH)) +
ylab("Acidez fija") + xlab("pH")
#----------------------------------------------------------------------------------------#
library(dplyr)
x <- cbind(muestra$fixed.acidity,muestra$pH)
x <- as.data.frame(x)
x
n = nrow(x)
y  = pull(x, V2)
sigma.rice <- 1/(2*(n-1))*sum((y - lag(y, k=1))^2, na.rm = T)
sigma.rice
base_cons <- function(x,j){
sqrt(2)*cos((j-1)*pi*x)
}
#-------------------------------
lambda.select <- function(x, lambda, salida=1){
df <-   dplyr::select(x, NO2)
hora_normada <- x$hora_normada; i <- list(); y <- list()
for (i in 2:lambda) {
y[[i]] <- base_cons(hora_normada, i)
}
y <- data.frame(matrix(unlist(y), ncol = lambda-1))
df <-  bind_cols(df, y)
#-------------------------------
f.i <- df %>%
dplyr::select(contains("x")) %>%
colnames()
lambda <- lambda %>%
tibble(lambda = . )
f.i_sum <- paste(f.i, collapse = "+")
mdl_formula <- as.formula(paste("NO2", f.i_sum, sep = "~"))
mdl <- lm(mdl_formula, data = df)
#-------------------------------
fitted <- predict(mdl) %>%
tibble(fitted = . )
#-------------------------------
S = lm.influence(mdl)$hat
tr = sum(S)
#-------------------------------
UBRE <-  (1/n) * sum(resid(mdl)^2) + (2/n) * sigma.rice*tr - sigma.rice %>%
tibble(ubre = .)
CV <- (1/n) * sum(((residuals(mdl) / (1-S))^2)) %>%
tibble(cv = .)
GCV <- (1/n) * ( sum(resid(mdl)^2) / (1 - (1/n) * tr)^2 ) %>%
tibble(GCV = .)
#-------------------------------
R <- bind_cols(UBRE, CV, GCV, lambda)
#-------------------------------
if(salida == 1) {
return(R)
} else {
return(fitted)
}
}
#-------------------------------
all.R <- function(x, lambda){
R <- list()
for(i in 2:lambda){
R[[i]] <- lambda.select(x,i)
}
R <- as.data.frame(t(matrix(unlist(R), ncol = lambda-1)))
names(R) <- c("UBRE","CV","GCV","LAMBDA")
return(R)
}
#-------------------------------
lambda <- 60
all.R <- all.R(x, lambda)
